version: 2.1

# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>  

  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              echo "Destroying environment: << parameters.workflow_id >> "
              aws s3 rm "s3://udapeople-${ << parameters.workflow_id >> }" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${ << parameters.workflow_id >>}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${ << parameters.workflow_id >> }"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            # Example: kvdb.io
            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  
            
jobs:
  print_greetings:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: << pipeline.id >>
      - run: echo HELLO
      - run: echo WORLD
      - run: echo $_env_name

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
            # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
             cd backend
             npm install
             npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install 
            npm run test

  test-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end 
          command: |
             cd backend
             npm install
             npm run test
   
  scan-frontend:
    docker:  
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            # Do not use the --force option along with the command below in your local
            npm audit fix --audit-level=critical
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # "Name=instance-id,Values=i-0d549b97e074b9b89" 

            BACKEND_IP = " aws ec2 describe-instances \
            --filters \
            "Name=instance-state-name,Values=running" \
            "Name=instance-type,Values=t2.micro" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]"\
            --output text "
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
     
  configure-infrastructure:
    docker:
       - image: python:3.7-alpine3.11
     
    steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["cd:27:1a:dc:93:5f:2b:61:a7:52:bd:16:dc:b7:03:3d"]
      
        - attach_workspace:
            at: ~/.circleci/ansible      
        - run:
            name: Install dependencies
            command: |
              # install the dependencies needed for your playbook
              apk add --update ansible    
        - run:
            name: Configure server
            command: |  
              ansible-playbook -i inventory.txt configure-server.yml
      
  run-migrations:
     docker:
       - image: cimg/node:15.1

     steps:
          - checkout 
          - run:
              name: Run migrations
              command: |
                  cd backend
                  npm install
                  # Run and save the migration output
                  npm run migrations > migrations_dump.txt
          - run:
              name: Send migration results to memstash
              command: |
                  if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                  then
                      # If you are using memstash.io, generate the token "CZ2Y8PiWV3H6WtMVVzs7gcc" on the website
                      curl -H "Content-Type: text/plain" -H "token: CZ2Y8PiWV3H6WtMVVzs7gc" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                      # If you are using kvdb.io, generate the bucket ID "CZ2Y8PiWV3H6WtMVVzs7gc" in your local terminal first
                      curl https://kvdb.io/CZ2Y8PiWV3H6WtMVVzs7gc/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                  fi
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
            at: ~/.circleci/ansible      
      - run:
          name: Install dependencies
          command: |
             sudo apt install python3.8
             apk add --update ansible  
             npm install 
      - run:
          name: Get backend url
          command: |
            # Get public api
            #  aws ec2 describe-instances --filters "Name=instance-type,Values=t2.micro" --query "Reservations[].Instances[].PublicIpAddress"
            export BACKEND_IP=$(
               aws ec2 describe-instances \
            --filters \
            "Name=instance-state-name,Values=running" \
            "Name=instance-type,Values=t2.micro" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]"\
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    
     # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
      docker:
          - image: amazon/aws-cli
      steps:
          - checkout    
          - add_ssh_keys:
                fingerprints: ["cd:27:1a:dc:93:5f:2b:61:a7:52:bd:16:dc:b7:03:3d"]
          - attach_workspace:
                at: ~/.circleci/ansible      
          - run:
              name: Install dependencies
              command: |
                sudo apt install python3.8
                sudo apt install gzip
                apk add --update ansible  
                npm install 

          - run:
              name: Deploy backend
              command: |
                cd backend
                npm i
                npm run build
                cd ..
                # Zip the directory
                tar -C backend -czvf artifact.tar.gz .
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat inventory.txt
                ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: cimg/base:2021.04 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
          
             sudo apt install python3.8
             sudo apt install gzip
             apk add --update ansible  
             npm install 
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
             ls -l /usr/local/bin/aws
             sudo apt install curl
      - run:
          name: Get backend url
          command: |
            API_URL=https://{BACKENIP/api/status}
            export BACKEND_IP=$(
               aws ec2 describe-instances \
            --filters \
            "Name=instance-state-name,Values=running" \
            "Name=instance-type,Values=t2.micro" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]"\
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi

      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install python3.8
            apk add --update ansible  
            npm install 
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople

      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            #yum install -y tar gzip
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            # You can use any condition like:
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
            
              echo OldWorkflowID: "${OldWorkflowID}"
            else
            
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
         

workflows:
  default:
    jobs:
      - print_greetings
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #    requires: [build-frontend]
      # - test-backend:
      #    requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #      requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #      filters:
      #        branches:
      #          only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #       requires: [cloudfront-update]

# VS Code Extension Version: 1.4.0